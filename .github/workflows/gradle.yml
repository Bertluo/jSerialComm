# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 9
      uses: oracle-actions/setup-java@v1.3.1
      with:
        install-as-version: '9'
        uri: 'https://download.java.net/java/GA/jdk9/9.0.4/binaries/openjdk-9.0.4_linux-x64_bin.tar.gz'
    - name: Set up JDK 6
      uses: actions/setup-java@v3
      with:
        java-version: '6'
        distribution: 'zulu'
    - name: Install apt dependencies
      run: 'sudo apt-get install -y lld help2man libtool-bin libtool-doc libncurses5-dev libmpfr-dev libmpc-dev'

    - name: Install crosstool-ng
      run: |
        wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.25.0.tar.bz2
        tar xjf crosstool-ng-1.25.0.tar.bz2
        cd crosstool-ng-1.25.0
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        rm -rf crosstool-ng-1.25.0 crosstool-ng-1.25.0.tar.bz2
    - uses: actions/cache/restore@v3
      id: crosstool-cache
      with:
        path: '~/x-tools/'
        key: ${{ runner.os }}-crosstool # This should hash the crosstool config files
    - name: Build linux compilers
      if: steps.crosstool-cache.outputs.cache-hit != 'true'
      run: |
        wget http://fazecast.github.io/jSerialComm/external/CrosstoolNgConfigFiles.tgz
        mkdir CrosstoolNgConfigFiles
        tar -xvhf CrosstoolNgConfigFiles.tgz -C ./CrosstoolNgConfigFiles
        rm -rf CrosstoolNgConfigFiles.tgz
        export CONFIG_SUBDIR="$( pwd )/CrosstoolNgConfigFiles"
        mkdir build
        cd build
        export ARCHS=("32" "32HF" "64" "PPC64LE" "x86" "x86_64")
        for arch in ${ARCHS[@]}; do
          cp -f "${CONFIG_SUBDIR}/jSerialComm${arch}.config" .config
          ct-ng upgradeconfig
          sed -i 's/CT_ZLIB_VERSION="1.2.12"/CT_ZLIB_VERSION="1.2.13"/' .config
          sed -i 's/CT_LOG_PROGRESS_BAR=y/CT_LOG_PROGRESS_BAR=n/' .config
          ct-ng build
        done
        cd ..
        rm -rf build CrosstoolNgConfigFiles
    - uses: actions/cache/save@v3
      with:
          path: '~/x-tools/'
          key: ${{ steps.crosstool-cache.outputs.cache-primary-key }}
    - name: Add linux compilers to PATH
      run: |
        echo "$HOME/x-tools/i486-unknown-linux-gnu/bin" >> $GITHUB_PATH
        echo "$HOME/x-tools/x86_64-unknown-linux-gnu/bin" >> $GITHUB_PATH
        echo "$HOME/x-tools/arm-unknown-linux-gnueabi/bin" >> $GITHUB_PATH
        echo "$HOME/x-tools/arm-unknown-linux-gnueabihf/bin" >> $GITHUB_PATH
        echo "$HOME/x-tools/aarch64-unknown-linux-gnu/bin" >> $GITHUB_PATH
        echo "$HOME/x-tools/powerpc64le-unknown-linux-gnu/bin" >> $GITHUB_PATH

    - name: Prepare Solaris compilers
      run: |
        mkdir ~/buildcc
        mkdir ~/x-tools && cd ~/x-tools
        wget http://fazecast.github.io/jSerialComm/external/SolarisSystemHeaders.tgz
        tar xvhf SolarisSystemHeaders.tgz
        rm -rf SolarisSystemHeaders.tgz
        ls ~/x-tools
        ls ~/x-tools/x86_64-sun-solaris2.10/sysroot/usr/include
        cd ~/buildcc
        wget https://ftp.gnu.org/gnu/gcc/gcc-7.3.0/gcc-7.3.0.tar.gz
        wget https://ftp.gnu.org/gnu/binutils/binutils-2.30.tar.gz
        tar xvhf gcc-7.3.0.tar.gz
        tar xvhf binutils-2.30.tar.gz
        rm -rf gcc-7.3.0.tar.gz binutils-2.30.tar.gz
    - name: Build x86 Solaris
      run: |
        cd ~/buildcc
        export TARGET=x86_64-sun-solaris2.10
        export PREFIX="$HOME/x-tools/$TARGET"
        export SYSROOT="$PREFIX/sysroot"
        export PATH="$PREFIX/bin:$PATH"
        
        mkdir build-binutils && cd build-binutils
        ../binutils-2.30/configure --prefix="$PREFIX" --target="$TARGET" --with-sysroot="$SYSROOT" --disable-nls --disable-werror
        make && make install
        cd .. && rm -rf build-binutils
        
        mkdir build-gcc && cd build-gcc
        ../gcc-7.3.0/configure --prefix="$PREFIX" --target="$TARGET" --with-sysroot="$SYSROOT" --disable-nls --enable-languages=c --with-gnu-as --with-gnu-ld
        make all-gcc all-target-libgcc
        make install-gcc install-target-libgcc
        cd .. && rm -rf build-gcc

        echo $HOME/x-tools/x86_64-sun-solaris2.10/bin >> $GITHUB_PATH
    - name: Build SPARC Solaris
      run: |
        cd ~/buildcc
        export TARGET=sparc-sun-solaris2.10
        export PREFIX="$HOME/x-tools/$TARGET"
        export SYSROOT="$PREFIX/sysroot"
        export PATH="$PREFIX/bin:$PATH"
        
        mkdir build-binutils && cd build-binutils
        ../binutils-2.30/configure --prefix="$PREFIX" --target="$TARGET" --with-sysroot="$SYSROOT" --disable-nls --disable-werror
        make && make install
        cd .. && rm -rf build-binutils
        
        mkdir build-gcc && cd build-gcc
        ../gcc-7.3.0/configure --prefix="$PREFIX" --target="$TARGET" --with-sysroot="$SYSROOT" --disable-nls --enable-languages=c --with-gnu-as --with-gnu-ld
        make all-gcc all-target-libgcc
        make install-gcc install-target-libgcc
        cd .. && rm -rf build-gcc

        echo $HOME/x-tools/sparc-sun-solaris2.10/bin >> $GITHUB_PATH
    
    - name: Install FreeBSD build tools
      run: |
        export ARCHS=("x86_64" "arm64" "i386")
        for arch in ${ARCHS[@]}; do
          mkdir -p "$HOME/x-tools/${arch}-unknown-freebsd12.4" && cd "$HOME/x-tools/${arch}-unknown-freebsd12.4"
          wget "http://ftp.plusline.de/FreeBSD/releases/${arch}/12.4-RELEASE/base.txz"
          tar -xf base.txz ./lib/ ./usr/lib/ ./usr/include/
          rm base.txz
          echo "$HOME/x-tools/${arch}-unknown-freebsd12.4" >> $GITHUB_PATH
        done
    - name: Install OpenBSD build tools
      run: |
        export ARCHS=("amd64" "i386")
        for arch in ${ARCHS[@]}; do
          mkdir -p "$HOME/x-tools/${arch}-unknown-openbsd7.3" && cd "$HOME/x-tools/${arch}-unknown-openbsd7.3"
          wget "https://ftp.nluug.nl/pub/OpenBSD/7.3/${arch}/base73.tgz"
          wget https://ftp.nluug.nl/pub/OpenBSD/7.3/${arch}/comp73.tgz
          tar -xf base73.tgz ./usr/lib/ ./usr/include/
          tar -xf comp73.tgz ./usr/lib/ ./usr/include/
          rm base73.tgz comp73.tgz
          echo "$HOME/x-tools/${arch}-unknown-openbsd7.3" >> $GITHUB_PATH
        done
      
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.4.2
      with:
        arguments: build
